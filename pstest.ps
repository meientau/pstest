(util.ps) runlibfile

/test-case {                    % <str> test-case mark
    print (\n) print

    % (*) create a package dict to count the tests
    3 dict begin
    /.test-total-count 0 def
    /.test-failed-count 0 def
    /.test-current-object null def

    % (**) mark the beginning of test results on the stack
    mark
} def

/should {                       % <str> should -
    /.test-current-object exch def
} def

/test-summary {	                % mark <any*> test-summary -
    (\n) print
    (--------------------------------------------------\n) print
    .test-total-count 5 string cvs print ( tests, ) print
    .test-failed-count 5 string cvs print ( failed\n) print

    % (*) now we printed them, we don't need the counts any longer
    end

    % (**) release accumulated messages to stdout
    ] {
	dup type /stringtype eq {
	    print
	} {
	    ==only
	} ifelse
    } forall
} def

/.test-passed {                 % - .test-passed -
    /.test-total-count inc
    (.) print
} def

/.test-failed {                 % <str> <any> <any> .test-failed <any*>
    /.expected exch def
    /.actual exch def
    /.spec exch def

    /.test-total-count inc
    /.test-failed-count inc
    (F) print
    .test-current-object null eq not {
        (\n) .test-current-object (\n)
        /.test-current-object null def
    } if
    (  should ) .spec (\n)
    (    expected: ) .expected (\n)
    (    actual:   ) .actual (\n)
} def

/assert-equal {                 % <str> <any> <any> assert-equal -
    /expected exch def
    /actual exch def
    /spec exch def

    expected actual eq {
        .test-passed
    } {
        spec actual expected .test-failed
    } ifelse
} bind def

/assert-not-equal {             % <str> <any> <any> assert-not-equal -
    /expected exch def
    /actual exch def
    /spec exch def

    expected actual eq not {
        .test-passed
    } {
        spec actual expected .test-failed
    } ifelse
} bind def

/assert-true {             % <str> <any> <any> assert-true -
    /expected true def
    /actual exch def
    /spec exch def

    actual {
        .test-passed
    } {
        spec actual expected .test-failed
    } ifelse
} bind def

/assert-false {             % <str> <any> <any> assert-true -
    /expected false def
    /actual exch def
    /spec exch def

    actual not {
        .test-passed
    } {
        spec actual expected .test-failed
    } ifelse
} bind def
